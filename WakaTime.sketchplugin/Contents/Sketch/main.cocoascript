@import "library.cocoascript";
@import "ini.cocoascript";
@import "utils.cocoascript";

// constants
var FREQUENCY = 2;

// globals
var LAST_FILE = '';
var LAST_TIME = null;

// lazy-loaded constants
var VERSION = null; // defined in event handler scope
var SKETCH_VERSION = null; // defined in event handler scope
var INSTALL_SCRIPT = null; // defined in event handler scope
var WAKATIME_CLI = null; // defined in event handler scope
var DEBUG_ENABLED = false;

var onStartup = function(context) {
  coscript.setShouldKeepAround(true);

  // set context globals
  VERSION = context.plugin.version();
  SKETCH_VERSION = [[[NSBundle mainBundle] infoDictionary] objectForKey:'CFBundleShortVersionString'];
  var contentsDir = utils.urlToPath(context.plugin.url()) + 'Contents/';
  INSTALL_SCRIPT = contentsDir + 'Resources/install_cli.py';
  WAKATIME_CLI = NSHomeDirectory() + '/.wakatime/wakatime-cli';
  DEBUG_ENABLED = ini.getConfig('settings', 'debug') == 'true';

  info('Initializing WakaTime v' + VERSION + '...');

  installCLI();

  // make sure api key is set in ~/.wakatime.cfg file
  var api_key = ini.getConfig('settings', 'api_key');
  if (!utils.isValidApiKey(api_key)) promptForApiKey();
};

var onSelectionChanged = function(context) {
  var action = context.actionContext;
  var document = action.document;
  var currentFile = document.fileURL();
  if (!currentFile) {
    info('Skipping current drawing because not saved to disk.');
    return;
  }

  currentFile = utils.urlToPath(currentFile);
  var currentTime = [NSDate date];
  if (!LAST_TIME) LAST_TIME = [currentTime dateByAddingTimeInterval:-60 * FREQUENCY];

  var seconds = [currentTime timeIntervalSinceDate:LAST_TIME];
  if (LAST_FILE != currentFile || seconds > FREQUENCY * 60) {
    LAST_FILE = currentFile;
    LAST_TIME = currentTime;
    sendHeartbeat(currentFile, false);
  } else {
    debug('Skipping current drawing because not enough time passed:' + currentFile);
  }
};

var sendHeartbeat = function(file, isWrite) {
  info('Sending heartbeat for current drawing:' + file);

  var args = [
    '--entity',
    file,
    '--plugin',
    'sketch/' + SKETCH_VERSION + ' sketch-wakatime/' + VERSION,
  ];
  if (isWrite)
    args.push('--write');

  info(WAKATIME_CLI + ' ' + args.join(' '));

  // run wakatime-cli in separate process
  var task = [[NSTask alloc] init];
  [task setLaunchPath: WAKATIME_CLI];
  [task setArguments: args];
  [task launch];
};

var installCLI = function() {
  info('Checking for wakatime-cli updates...');
  info('/usr/bin/python3 ' + INSTALL_SCRIPT);

  // run wakatime-cli in separate process
  var task = [[NSTask alloc] init];
  [task setLaunchPath: '/usr/bin/python3'];
  [task setArguments: [INSTALL_SCRIPT]];
  try {
    [task launch];
  } catch(e) {
    info('Error installing wakatime-cli: ' + e.toString());
    info('/usr/bin/python ' + INSTALL_SCRIPT);
    var task = [[NSTask alloc] init];
    [task setLaunchPath: '/usr/bin/python'];
    [task setArguments: [INSTALL_SCRIPT]];
    [task launch];
  }
};

var promptForApiKey = function() {
  var api_key = ini.getConfig('settings', 'api_key');
  var alert = [NSAlert alertWithMessageText:'Enter your api key from wakatime.com' defaultButton:null alternateButton:null otherButton:null informativeTextWithFormat:''];
  var input = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 0, 300, 24)];
  if (api_key) {
    [input setStringValue:api_key];
  }
  [alert setAccessoryView:input];
  [alert runModal];
  api_key = [input stringValue];
  ini.setConfig('settings', 'api_key', api_key);
  return api_key;
}

var info = function(msg) {
  console.log('[WakaTime] [INFO] ' + msg);
};

var debug = function(msg) {
  if (DEBUG_ENABLED) console.log('[WakaTime] [DEBUG] ' + msg);
};
